{"version":3,"sources":["Home/Home.js","useChat.js","ChatRoom/ChatRoom.js","App.js","reportWebVitals.js","index.js"],"names":["Home","React","useState","roomName","setRoomName","className","type","placeholder","value","onChange","event","target","to","useChat","roomId","messages","setMessages","socketRef","useRef","useEffect","current","socketIOClient","query","on","message","disconnect","sendMessage","messageBody","emit","body","senderId","id","ChatRoom","props","match","params","newMessage","setNewMessage","console","log","onClick","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SA4BeA,G,MAvBF,WACX,MAAgCC,IAAMC,SAAS,IAA/C,mBAAOC,EAAP,KAAiBC,EAAjB,KAMA,OACE,yBAAKC,UAAU,kBACb,2BACEC,KAAK,OACLC,YAAY,mGACZC,MAAOL,EACPM,SAVuB,SAACC,GAC5BN,EAAYM,EAAMC,OAAOH,QAUrBH,UAAU,qBAEZ,kBAAC,IAAD,CAAMO,GAAE,WAAMT,GAAYE,UAAU,qBAApC,sEACeF,M,yBC0BNU,EAzCC,SAACC,GACf,MAAgCZ,mBAAS,IAAzC,mBAAOa,EAAP,KAAiBC,EAAjB,KACMC,EAAYC,mBAElBC,qBAAU,WAoBR,OAjBAF,EAAUG,QAAUC,IAVE,qCAUgC,CACpDC,MAAO,CAAER,YAKXG,EAAUG,QAAQG,GAjBS,kBAiBkB,SAACC,GAM5CR,EAAYQ,MAKP,WACLP,EAAUG,QAAQK,gBAEnB,CAACX,IAWJ,MAAO,CAAEC,WAAUW,YAPC,SAACC,GACnBV,EAAUG,QAAQQ,KApCS,iBAoCoB,CAC7CC,KAAMF,EACNG,SAAUb,EAAUG,QAAQW,QCYnBC,EAhDE,SAACC,GAChB,IAAQnB,EAAWmB,EAAMC,MAAMC,OAAvBrB,OACR,EAAkCD,EAAQC,GAAlCC,EAAR,EAAQA,SAAUW,EAAlB,EAAkBA,YAClB,EAAoCzB,IAAMC,SAAS,IAAnD,mBAAOkC,EAAP,KAAmBC,EAAnB,KAeA,OAJApC,IAAMkB,WAAU,WAElBmB,QAAQC,IAAIxB,KACP,CAACA,IAEF,yBAAKV,UAAU,uBACb,wBAAIA,UAAU,aAAd,6BAAiCS,GAejC,8BACEN,MAAO4B,EACP3B,SAhCyB,SAACC,GAC9B2B,EAAc3B,EAAMC,OAAOH,QAgCvBD,YAAY,mBACZF,UAAU,4BAEZ,4BAAQmC,QAhCc,WACxBd,EAAYU,GACZC,EAAc,KA8BwBhC,UAAU,uBAA9C,kEC5BSoC,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5C,IACjC,kBAAC,IAAD,CAAO0C,OAAK,EAACC,KAAK,WAAWC,UAAWZ,OCAjCa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.afd5edc4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Home.css\";\n\nconst Home = () => {\n  const [roomName, setRoomName] = React.useState(\"\");\n\n  const handleRoomNameChange = (event) => {\n    setRoomName(event.target.value);\n  };\n\n  return (\n    <div className=\"home-container\">\n      <input\n        type=\"text\"\n        placeholder=\"เลือกหมายเลขไอดี\"\n        value={roomName}\n        onChange={handleRoomNameChange}\n        className=\"text-input-field\"\n      />\n      <Link to={`/${roomName}`} className=\"enter-room-button\">\n        เข้าสู่ห้อง {roomName}\n      </Link>\n    </div>\n  );\n};\n\nexport default Home;","import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\"; // Name of the event\nconst SOCKET_SERVER_URL = \"https://apisocketio.komkawila.com/\";\n// const SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = (roomId) => {\n  const [messages, setMessages] = useState([]); // Sent and received messages\n  const socketRef = useRef();\n\n  useEffect(() => {\n    \n    // Creates a WebSocket connection\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { roomId },\n    });\n    \n    // Listens for incoming messages\n    \n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n    //   const incomingMessage = {\n    //     ...message,\n    //     ownedByCurrentUser: message.senderId === socketRef.current.id,\n    //   };\n    //   setMessages((messages) => [...messages, incomingMessage]);\n      setMessages(message);\n    });\n    \n    // Destroys the socket reference\n    // when the connection is closed\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [roomId]);\n\n  // Sends a message to the server that\n  // forwards it to all users in the same room\n  const sendMessage = (messageBody) => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n    });\n  };\n\n  return { messages, sendMessage };\n};\n\nexport default useChat;","import React from \"react\";\n\nimport \"./ChatRoom.css\";\nimport useChat from \"../useChat\";\n\nconst ChatRoom = (props) => {\n  const { roomId } = props.match.params;\n  const { messages, sendMessage } = useChat(roomId);\n  const [newMessage, setNewMessage] = React.useState(\"\");\n\n  const handleNewMessageChange = (event) => {\n    setNewMessage(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    sendMessage(newMessage);\n    setNewMessage(\"\");\n  };\n\n  React.useEffect(() => {\n    \nconsole.log(messages);\n  }, [messages])\n  return (\n    <div className=\"chat-room-container\">\n      <h1 className=\"room-name\">ห้อง: {roomId}</h1>\n      {/* <div className=\"messages-container\">\n        <ol className=\"messages-list\">\n          {messages.map((message, i) => (\n            <li\n              key={i}\n              className={`message-item ${\n                message.ownedByCurrentUser ? \"my-message\" : \"received-message\"\n              }`}\n            >\n            </li>\n          ))}\n        </ol>\n              {messages}\n      </div> */}\n      <textarea\n        value={newMessage}\n        onChange={handleNewMessageChange}\n        placeholder=\"Write message...\"\n        className=\"new-message-input-field\"\n      />\n      <button onClick={handleSendMessage} className=\"send-message-button\">\n        ส่งข้อความ\n      </button>\n    </div>\n  );\n};\n\nexport default ChatRoom;","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport Home from \"./Home/Home\";\nimport ChatRoom from \"./ChatRoom/ChatRoom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/:roomId\" component={ChatRoom} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}